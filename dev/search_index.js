var documenterSearchIndex = {"docs":
[{"location":"api/#API-references","page":"API","title":"API references","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The package exports the following functions for parameters identifiability analysis, confidence intervals evaluation and results visualization.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [LikelihoodProfiler]\nOrder   = [:function, :type, :module]","category":"page"},{"location":"api/#LikelihoodProfiler.chi2_quantile","page":"API","title":"LikelihoodProfiler.chi2_quantile","text":"chi2_quantile(α, df=1)\n\nComputes α quantile for Chi2 distribution with df degrees of freedom\n\n\n\n\n\n","category":"function"},{"location":"api/#LikelihoodProfiler.profile-Tuple{PLProblem{LikelihoodProfiler.ParameterProfile}, LikelihoodProfiler.AbstractProfilerMethod}","page":"API","title":"LikelihoodProfiler.profile","text":"profile(plprob::PLProblem, method::AbstractProfilerMethod; \n        idxs::AbstractVector{<:Int} = eachindex(get_optpars(plprob)),\n        parallel_type::Symbol=:none, kwargs...)\n\nProfiles the likelihood function for the given problem plprob using the specified profiling method.\n\nArguments\n\nplprob::PLProblem{ParameterProfile}: The profiling problem instance containing the parameters and likelihood function to be profiled.\nmethod::AbstractProfilerMethod: The method to be used for profiling.\nidxs::AbstractVector{<:Int}: Indices of the parameters to be profiled. Defaults to all parameters.\nparallel_type::Symbol: Specifies the type of parallelism to be used. Defaults to :none.\nkwargs...: Additional keyword arguments to be passed to the profiling method.\n\nReturns\n\nReturns the profiling results PLSolution.\n\nExample\n\nplprob = PLProblem(optprob, optpars, [(-10.,10.), (-5.,5.)])\nmethod = OptimizationProfiler(optimizer = Optimization.LBFGS(), stepper = FixedStep())\nsol = profile(plprob, method; idxs=[1])\n\n\n\n\n\n","category":"method"},{"location":"api/#LikelihoodProfiler.CICOProfiler","page":"API","title":"LikelihoodProfiler.CICOProfiler","text":"CICOProfiler\n\nConfidence Intervals by Constrained Optimization (CICO) method to find the intersections of the likelihood function with the threshold.\n\nFields\n\noptimizer::Symbol: The optimizer used for the optimization process. Defaults to NLopt :LN_NELDERMEAD.\nscan_tol::Float64: The tolerance for the endpoints scan. Defaults to 1e-3.\n\nExample\n\nprofiler = CICOProfiler(optimizer = :LN_NELDERMEAD, scan_tol = 1e-3)\n\n\n\n\n\n","category":"type"},{"location":"api/#LikelihoodProfiler.IntegrationProfiler","page":"API","title":"LikelihoodProfiler.IntegrationProfiler","text":"IntegrationProfiler{opType, optsType, DEAlg, DEOpts}\n\nA profiler method that uses integration of differential equations system to profile the likelihood function.\n\nFields\n\nreoptimize::Bool: Indicates whether to re-optimize during profiling. Defaults to false.\noptimizer::opType: The optimizer used for the optimization process. Defaults to nothing.\noptimizer_opts::optsType: Options for the optimizer. Defaults to nothing.\nintegrator::DEAlg: The differential equation algorithm used for integration.\nintegrator_opts::DEOpts: Options for the differential equation solver.\nmatrix_type::Symbol: The type of matrix to be used for the Hessian approximation. Defaults to :hessian.\ngamma::Float64: Correction factor. Defaults to 1.0.\n\nExample\n\nusing OrdinaryDiffEq\nprofiler = IntegrationProfiler(integrator = Tsit5(), integrator_opts = (dtmax=0.3,), matrix_type = :hessian)\n\n\n\n\n\n","category":"type"},{"location":"api/#LikelihoodProfiler.OptimizationProfiler","page":"API","title":"LikelihoodProfiler.OptimizationProfiler","text":"OptimizationProfiler{S, opType, optsType}\n\nA profiler method that uses stepwise re-optimization to profile the likelihood function.\n\nFields\n\nstepper::S: The algorithm used to compute the next profile point.\noptimizer::opType: The optimizer used for the optimization process.\noptimizer_opts::optsType: Options for the optimizer. Defaults to NamedTuple().\n\nExample\n\nusing Optimization\nprofiler = OptimizationProfiler(; optimizer = Optimization.LBFGS(), optimizer_opts = (reltol=1e-4,), stepper = FixedStep())\n\n\n\n\n\n","category":"type"},{"location":"api/#LikelihoodProfiler.PLProblem","page":"API","title":"LikelihoodProfiler.PLProblem","text":"Defines a profile likelihood problem.\n\nMathematical Specification of a Profile Likelihood Problem:\n\nA profile likelihood problem is defined by \n\nan objective function (usually negative log-likelihood function) wrapped within an optprob::OptimizationProblem (see Optimization.jl docs https://docs.sciml.ai/Optimization/stable/API/optimization_problem/).\na set of parameters optpars that minimize the objective.\n\nConstructors\n\nPLProblem(optprob, optpars, profile_range = tuple.(optprob.lb, optprob.ub); \n  conf_level = 0.95, df = 1, threshold = chi2_quantile(conf_level, df))\n\nArguments\n\noptprob: The OptimizationProblem to be solved.\noptpars: Initial (optimal) values of the parameters.\nprofile_range: The range over which the profile likelihood is computed. Defaults to tuple.(lb,ub) of the OptimizationProblem.\n\nKeyword arguments\n\nconf_level: The confidence level for the profile likelihood. Defaults to 0.95.\ndf: The degrees of freedom for the profile likelihood. Defaults to 1.\nthreshold: The threshold for the profile likelihood. Defaults to chi2_quantile(conf_level, df).\n\n\n\n\n\n","category":"type"},{"location":"case_studies/taxol/#Taxol-model","page":"Taxol model","title":"Taxol model","text":"","category":"section"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"As an example of practical identifiability analysis, we use the Cancer Taxol Treatment Model. It is an ODE model with 3 state variables and 5 parameters. The identifiability of this model was studied in Marisa C.Eisenberg, Harsh V.Jain. A confidence building exercise in data and identifiability. We have translated author's MATLAB code into Julia. The model is defined by the following system of differential equations:","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"using LikelihoodProfiler, Test\nusing Optimization, OptimizationNLopt, ForwardDiff, OrdinaryDiffEq, CICOBase\n\n# https://github.com/marisae/cancer-chemo-identifiability/blob/master/Profile%20Likelihood/testa0_de.m\nfunction ode_func(du, u, p, t, drug)\n  let (a0, ka, r0, d0, kd) = (p[1], p[2], p[3], p[4], p[5])\n\n      K   = 10.515*100\n      V0  = 1.3907*K\n      lam = 9.5722\n\n      theta = 10.\n\n      # Values taken from \n      aRP  = 20.     # per day from Kim_PrlifQuies\n\n      Ncel = u[1] + u[2] + u[3]\n      Lfac = ((K-Ncel)^theta)/((V0^theta) + ((K-Ncel)^theta))\n\n      arstexp = 3.\n      adthexp = 4.\n\n      arst = a0*(drug^arstexp)/(ka^arstexp + (drug^arstexp))\n      adth = d0*(drug^adthexp)/(kd^adthexp + (drug^adthexp))\n      arcv = r0\n\n      # The differntial equations\n      du[1] = -lam*u[1] + aRP*u[2]*Lfac - arst*u[1] + arcv*u[3]\n      du[2] = 2*lam*u[1] - aRP*u[2]*Lfac\n      du[3] = arst*u[1] - adth*u[3] - arcv*u[3]\n  end\nend","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"Experimental datasets are also provided in the cancer-chemo-identifiability repo for four drug doses (5, 10, 40, 100)","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"# https://github.com/marisae/cancer-chemo-identifiability/blob/master/Profile%20Likelihood/testa0_fit.m\n\n# Data from Terzis et al. Brit J Cancer 1997;75:1744.\n# From Bowman et al. Glia 1999;27:22, glioma cell volume is 0.916\n# picoliters, 1 mm^3 = 1e6 pl or ~1.091 million cells\n\ntimes = [0., 3., 6., 9., 12., 15.]   # days\n\ndose = [5., 10., 40., 100.];    # dose in ng/ml\n\n# Control data\nCell = [0.009, 0.050, 0.120, 0.189, 0.230, 0.260]*1091.0   # thousands of cells\nCerr = [0.006, 0.012, 0.010, 0.011, 0.011, 0.011]*1091.0   # thousands of cells\n\n# 0.005 ug/ml Taxol\nCell005 = [0.009, 0.047, 0.089, 0.149, 0.198, 0.219]*1091.0   # thousands of cells\nCerr005 = [0.006, 0.013, 0.010, 0.011, 0.013, 0.010]*1091.0   # thousands of cells\n\n# 0.010 ug/ml Taxol\nCell010 = [0.009, 0.043, 0.077, 0.093, 0.109, 0.128]*1091.0   # thousands of cells\nCerr010 = [0.006, 0.012, 0.013, 0.012, 0.014, 0.012]*1091.0   # thousands of cells\n\n# 0.040 ug/ml Taxol\nCell040 = [0.009, 0.025, 0.047, 0.054, 0.076, 0.085]*1091.0   # thousands of cells\nCerr040 = [0.005, 0.010, 0.010, 0.011, 0.010, 0.010]*1091.0   # thousands of cells\n\n# 0.100 ug/ml Taxol\nCell100 = [0.009, 0.025, 0.026, 0.028, 0.029, 0.031]*1091.0   # thousands of cells\nCerr100 = [0.006, 0.010, 0.009, 0.008, 0.011, 0.011]*1091.0   # thousands of cells\n\nC005 = LikelihoodProfiler.mean(Cell005)\nC010 = LikelihoodProfiler.mean(Cell010)\nC040 = LikelihoodProfiler.mean(Cell040)\nC100 = LikelihoodProfiler.mean(Cell100)\n\ndata = [Cell005/C005, Cell010/C010, Cell040/C040, Cell100/C100]\ndatamean = [C005, C010, C040, C100]","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"Next we define solver options, initial values, optimal parameter values, and tspan","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"# solver algorithm and tolerances\nsolver_opts = Dict(\n    :alg => AutoTsit5(Rosenbrock23()),\n    :reltol => 1e-6,\n    :abstol => 1e-8\n)\n\n# initial values and parameters\n# https://github.com/marisae/cancer-chemo-identifiability/blob/master/Profile%20Likelihood/testa0_soln.m#L3-L6\n# https://github.com/marisae/cancer-chemo-identifiability/blob/master/Profile%20Likelihood/testa0_fit.m#L4\n\nu0 = [7.2700, 2.5490, 0.]\np0 = [8.3170, 8.0959, 0.0582, 1.3307, 119.1363] \n\ntspan = (0.,15.)","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"We use OLS for the objective function as proposed in the original code.","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"# https://github.com/marisae/cancer-chemo-identifiability/blob/master/Profile%20Likelihood/testa0_fit.m#L92\n# https://www.mathworks.com/help/optim/ug/lsqcurvefit.html\nfunction taxol_obj(\n  x, _p;\n  ode_func=ode_func,\n  dose=dose,\n  data=data,\n  datamean=datamean,\n  times=times,\n  solver_opts=solver_opts\n)\n  loss = 0.\n  for (i,d) in enumerate(dose)\n     prob = ODEProblem((du,u,p,t)->ode_func(du,u,p,t,d), u0, tspan, x)\n     sol = solve(prob, \n                 solver_opts[:alg], \n                 reltol=solver_opts[:reltol],\n                 abstol=solver_opts[:abstol],\n                 saveat=times)\n      \n     sim = (sol[1,:] + sol[2,:] + sol[3,:])/datamean[i]\n     loss += sum((sim-data[i]).^2)\n  end\n  return loss\nend\n\n# threshold is chosen according to\n# https://github.com/marisae/cancer-chemo-identifiability/blob/master/Profile%20Likelihood/testa0_fit.m#L40-L41\nsigmasq = (LikelihoodProfiler.mean([(Cerr005/C005); (Cerr010/C010); (Cerr040/C040); (Cerr100/C100)]))^2","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"Next, we construct the profile likelihood problem PLProblem and run the profiler for the five parameters:","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"optf = OptimizationFunction(taxol_obj, Optimization.AutoForwardDiff())\noptprob = OptimizationProblem(optf, p0)\nprofile_range = [\n  (2., 30.),\n  (2.0, 30.),\n  (0.01, 0.6),\n  (0.05, 5.),\n  (30., 250.)\n]\nplprob = PLProblem(optprob, p0, profile_range; threshold = sigmasq*chi2_quantile(0.95, 5))\n\nprofile_step(p0, i) = p0[i] * 0.1\nmethod = OptimizationProfiler(optimizer = NLopt.LN_NELDERMEAD(), stepper = FixedStep(; initial_step=profile_step))\nsol = profile(plprob, method)\nplot(sol, size=(800,300), margins=5Plots.mm)","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"Finally, we plot the resulting profiles:","category":"page"},{"location":"case_studies/taxol/","page":"Taxol model","title":"Taxol model","text":"(Image: taxol.png)","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LikelihoodProfiler is a Julia package for practical identifiability analysis and confidence intervals estimation using the profile likelihood approach.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In Julia terminal run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"LikelihoodProfiler\")","category":"page"},{"location":"#Methods","page":"Home","title":"Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LikelihoodProfiler.jl provides a unified interface for various profile likelihood-based methods of practical identifiability: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Confidence intervals by Constrained Optimization method (CICO)\nOptimization-based likelihood profiles\nIntegration-based likelihood profiles\nHybrid approaches","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Borisov I., Metelkin E. An Algorithm for Practical Identifiability Analysis and Confidence Intervals Evaluation Based on Constrained Optimization. 2018. October. ICSB2018. https://doi.org/10.13140/RG.2.2.18935.06563","category":"page"},{"location":"tutorial/#Getting-started-with-LikelihoodProfiler","page":"Tutorial","title":"Getting started with LikelihoodProfiler","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To define a profile likelihood problem PLProblem in LikelihoodProfiler, you should provide the objective function (usually negative log likelihood) and the optimal values of the parameters that correspond to the minimum of the objective function. LikelihoodProfiler relies on the Optimization.jl interface, and PLProblem is built on top of the OptimizationProblem defined in Optimization.jl. This can be best illustrated by an example.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First we define the OptimizationProblem and solve it with the preferred optimizer to obtain the optimal values of the parameters. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Optimization, ForwardDiff\n\n# objective function\nrosenbrock(x,p) = (1.0 - x[1])^2 + 100.0*(x[2] - x[1]^2)^2\n\n# initial values\nx0 = zeros(2)\n\n# solving optimization problem\noptf = OptimizationFunction(rosenbrock, AutoForwardDiff())\noptprob = OptimizationProblem(optf, x0)\nsol = solve(optprob, Optimization.LBFGS())","category":"page"},{"location":"tutorial/#Profile-likelihood-problem-interface","page":"Tutorial","title":"Profile likelihood problem interface","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To define the PLProblem, we need the OptimizationProblem and the optimal values of the parameters. We can also set the profiling domain with the profile_range argument and the threshold, which is the confidence level required to estimate confidence intervals. Please consult ?PLProblem on the details of the interface.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using LikelihoodProfiler, Plots\n\n# optimal values of the parameters\noptpars = sol.u\n\n# profile likelihood problem\nplprob = PLProblem(optprob, optpars, (-10.,10.); threshold = 4.0)","category":"page"},{"location":"tutorial/#Profile-likelihood-methods","page":"Tutorial","title":"Profile likelihood methods","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"LikelihoodProfiler provides a range of methods to profile likelihood functions and explore practical identifiability. The most common and simple \"profiler\" is the OptimizationProfiler method. It is based on stepwise re-optimization of the likelihood function with the constraint on the parameter (or function) of interest. We define the method and run the profile procedure. Please consult ?profile on the details of the interface.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"method = OptimizationProfiler(optimizer = Optimization.LBFGS(), stepper = FixedStep(; initial_step=0.15))\nsol = profile(plprob, method)\nplot(sol, size=(800,300), margins=5Plots.mm)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The same profile interface can be used with other profiling methods. For example, a more advanced way to compute profiles is proposed by IntegrationProfiler. It obtains the profiles as solutions to the differential equation system. To solve this internally generated system, we need to provide a differential equations solver (integrator).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using OrdinaryDiffEq\n\nmethod = IntegrationProfiler(integrator = Tsit5(), integrator_opts = (dtmax=0.3,), matrix_type = :hessian)\nsol = profile(plprob, method)\nplot(sol, size=(800,300), margins=5Plots.mm)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Likelihood profiling is mostly performed to assess if the profile has intersections with the given confidence level, hence if the parameter (or function of parameters) has finite confidence interval. Another approach to the problem of practical identifiability is to compute these intersections (endpoints of the confidence interval (CI)) without restoring the full shape of the profile. One of such methods is implemented in CICOProfiler. It estimates CI endpoints with an optimization procedure without following the exact trajectory of the profile. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CICOBase\n\nmethod = CICOProfiler(optimizer = :LN_NELDERMEAD, scan_tol = 1e-4)\nsol = profile(plprob, method)\nplot(sol, size=(800,300), margins=5Plots.mm)","category":"page"}]
}
